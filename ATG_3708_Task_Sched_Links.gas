Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start

Variable.Global.sFile.Declare(String)
Variable.Global.sLog.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Coded by: SMC
'Project Start Date: 11/4/2010
'Hooks:
'  Task Scheduler
'Notes:
'  Quote 1598 for Customer Loadmaster
'  A GAB script will run off the task scheduler and search through a specific folder (M:\To Be Processed) where paperwork is scanned in PDF form.  The format of this folder will be as follows:
'  M:\To Be Processed\BIN\LOT\PART\LOT-HEAT.PDF
'  It will then add a link to the Item Master based on this item combination.  In addition, it will add a link to any WO the item was used on. After the GAB script processes each PDF,
'  it will move it to a separate folder that contains only processed PDFs:  M:\Processed\BIN\LOT\PART\LOT-HEAT.PDF.

'REVISIONS:
'12/2/10:
'  - Since some of their parts have "/" characters in them, I'm doing a string replace in part folders where "!$!" is replaced with "/" before searching item master records. (Get_Items)
'  - In the AddDocument command, I changed the group from 0 to -1 for both link types.  -1 allows all users to see, 0 only SUPERVSR (Process_PDF)
'  - Changed Program log to write to M:\Logs instead of Global\TEMP (DL)

'Notes:
'Make sure they're not using any read only files


F.ODBC.Connection!conx.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)
V.Local.sText.Declare(String)

F.Intrinsic.Control.CallSub(Dl,"sText","Program Start: Processing Item docs to attach Item and WO Links")
F.Intrinsic.Control.CallSub(Loop_dirs,"iCurrLevel",0,"sDir","M:\To Be Processed\")
F.Intrinsic.String.Concat("Program End",V.Ambient.NewLine,V.Ambient.NewLine,V.Local.sText)
F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sText)
F.Intrinsic.Control.CallSub(Unload)

Program.Sub.Main.End

Program.Sub.Get_Dirs.Start
F.Intrinsic.Debug.SetLA("Get_Dirs: Returns all folders (iType=0) or files (iType=1) as FQPs from a passed file directory")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Get_Dirs_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sDir.Declare(String)
V.Local.sDirs.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.bRet.Declare(Boolean)
V.Local.bPDF.Declare(Boolean)
V.Local.iC.Declare(Long)

V.Local.sDir.Set(V.Args.sDir)
F.Intrinsic.File.DirExists(V.Local.sDir,V.Local.bRet)

F.Intrinsic.Control.If(V.Local.bRet,=,True)
	F.Intrinsic.Control.If(V.Args.iType,=,0)
		F.Intrinsic.File.GetFileList(V.Local.sDir,16,V.Local.sDirs)
	F.Intrinsic.Control.Else
		F.Intrinsic.File.GetFileList(V.Local.sDir,4,V.Local.sDirs)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.String.Split(V.Local.sDirs,":",V.Local.sDirs)
	F.Intrinsic.Control.If(V.Local.sDirs.UBound,>=,0)
		F.Intrinsic.Control.For(V.Local.iC,0,V.Local.sDirs.UBound,1)
			F.Intrinsic.Control.If(V.Local.sDirs(v.Local.iC),<>,"")
				F.Intrinsic.Control.If(V.Local.sDirs(v.Local.iC),<>,".")
					F.Intrinsic.Control.If(V.Local.sDirs(v.Local.iC),<>,"..")
						F.Intrinsic.Control.If(V.Args.iType,=,0)
							'Adds Fully Qualified Paths for Dirs
							F.Intrinsic.Control.If(V.Local.sRet,=,"")
								F.Intrinsic.String.Concat(V.Local.sDir,V.Local.sDirs(v.Local.iC),"\",V.Local.sRet)
							F.Intrinsic.Control.Else
								F.Intrinsic.String.Concat(V.Local.sRet,";",V.Local.sDir,V.Local.sDirs(v.Local.iC),"\",V.Local.sRet)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else
							'Adds FQPs for PDFs
							F.Intrinsic.Control.If(V.Local.sRet,=,"")
								F.Intrinsic.String.Concat(V.Local.sDir,V.Local.sDirs(v.Local.iC),V.Local.sRet)
							F.Intrinsic.Control.Else
								F.Intrinsic.String.Concat(V.Local.sRet,";",V.Local.sDir,V.Local.sDirs(v.Local.iC),V.Local.sRet)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iC)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("sDirs",V.Local.sRet)

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Get_Dirs_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf





Program.Sub.Get_Dirs.End

Program.Sub.Loop_Dirs.Start
F.Intrinsic.Debug.SetLA("Loop_Dirs: Loops through M:\To Be Processed\Bin\Lot\Part\Lot-Heat.ext dirs 3 levels deep (starting at M:\To Be Processed) to get to files in the Part folders.")
V.Local.sDir.Declare(String)
V.Local.sSubDirs.Declare(String)
V.Local.iC.Declare(Long)
V.Local.iLevel.Declare(Long)

F.Intrinsic.Math.Add(V.Args.iCurrLevel,1,V.Local.iLevel)
F.Intrinsic.Control.CallSub(Get_dirs,"sDir",V.args.sDir,"iType",0)
F.Intrinsic.Debug.SetLA(V.Args.sDir)
F.Intrinsic.Control.If(V.args.sDirs,<>,"")
	F.Intrinsic.String.Split(V.Args.sDirs,";",V.Local.sSubDirs)
	
	F.Intrinsic.Control.For(V.Local.iC,0,V.Local.sSubDirs.UBound,1)
		F.Intrinsic.Control.If(V.Local.iLevel,<,3)
			F.Intrinsic.Control.CallSub(Loop_dirs,"iCurrLevel",V.Local.iLevel,"sDir",V.Local.sSubDirs(v.Local.iC))
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.CallSub(Loop_pdfs,"sDir",V.Local.sSubDirs(v.Local.iC))
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iC)
F.Intrinsic.Control.EndIf



Program.Sub.Loop_Dirs.End

Program.Sub.Loop_PDFs.Start
F.Intrinsic.Debug.SetLA("Loop_PDFs:  Gets all files in part folder (Get_Dirs), then processes each (Process_pdf)")
V.Local.sDir.Declare(String)
V.Local.sPDFs.Declare(String)
V.Local.iC.Declare(Long)

F.Intrinsic.Control.CallSub(Get_dirs,"sDir",V.args.sDir,"iType",1)
f.Intrinsic.Debug.SetLA(V.Args.sDirs)
F.Intrinsic.Debug.Stop
F.Intrinsic.Control.If(V.args.sDirs,<>,"")
	F.Intrinsic.String.Split(V.Args.sDirs,";",V.Local.sPDFs)
	F.Intrinsic.Control.For(V.Local.iC,0,V.Local.sPDFs.UBound,1)
		F.Intrinsic.Control.CallSub(Process_pdf,"sPath",V.Local.sPDFs(v.Local.iC))
	F.Intrinsic.Control.Next(V.Local.iC)
F.Intrinsic.Control.EndIf




Program.Sub.Loop_PDFs.End

Program.Sub.Process_PDF.Start
F.Intrinsic.Debug.SetLA("Process_PDF:  From a passed FQ filename, extracts Item info (Get_Items), copies item from M:\To Be Processed to M:\Processed (Move_Item), attaches doc to Item link and all WOs it's been issued to, then deletes from M:\To Be Processed")
V.Local.sPart.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sHeat.Declare(String)
V.Local.sPath.Declare(String)
V.Local.sKey.Declare(String)
V.Local.iLinkID.Declare(Long)
V.Local.sTargPath.Declare(String)
V.Local.sSourcePath.Declare(String)
V.Local.iDocID.Declare(Long)
V.Local.sQuery.Declare(String)
V.Local.bItem.Declare(Boolean)

F.Intrinsic.Debug.SetLA("Gets Item info and exits sub if not complete")
V.Local.sPath.Set(V.Args.sPath)
F.Intrinsic.Control.CallSub(Get_items,"sPath",V.local.sPath)
V.Local.sPart.Set(V.Args.sPart)
V.Local.sBin.Set(V.Args.sBin)
V.Local.sLot.Set(V.Args.sLot)
V.Local.sHeat.Set(V.Args.sHeat)

V.Local.bItem.Set(True)
F.Intrinsic.Control.If(V.Local.sPart.Trim,=,"")
	V.Local.bItem.Set(False)
F.Intrinsic.Control.ElseIf(V.Local.sBin.Trim,=,"")
	V.Local.bItem.Set(False)
F.Intrinsic.Control.ElseIf(V.Local.sLot.Trim,=,"")
	V.Local.bItem.Set(False)
F.Intrinsic.Control.ElseIf(V.Local.sHeat.Trim,=,"")
	V.Local.bItem.Set(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bItem,=,False)
	F.Intrinsic.String.Concat("ERROR! Error linking document:  Unable to identify Bin, Lot, Part, and/or Heat from ",V.Local.sPath,V.Local.sQuery)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sQuery)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Debug.Stop
F.Intrinsic.Debug.SetLA("Builds Item Link Key, then checks if the Item record exists")
F.Intrinsic.String.RPad(V.Local.sPart.RTrim," ",22,V.Local.sPart)
F.Intrinsic.String.RPad(V.Local.sLot.RTrim," ",15,V.Local.sLot)
F.Intrinsic.String.RPad(V.Local.sBin.RTrim," ",6,V.Local.sBin)
F.Intrinsic.String.RTrim(V.Local.sHeat,V.Local.sHeat)
F.Intrinsic.String.Concat(V.Local.sPart,V.Local.sLot,V.Local.sBin,V.Local.sHeat,V.Local.sKey)
F.Intrinsic.Debug.Stop
F.Intrinsic.String.Concat("SELECT * FROM V_ITEM_MASTER WHERE PART='",V.Local.sPart,"' AND LOT='",V.Local.sLot,"' AND BIN='",V.Local.sBin,"' AND HEAT='",V.Local.sHeat,"'",V.Local.sQuery)
F.Intrinsic.Debug.SetLA(V.Local.sQuery)
F.ODBC.Connection!conx.OpenRecordsetRO("rstItem",V.Local.sQuery)
F.Intrinsic.Control.If(V.ODBC.conx!rstItem.EOF,=,True)
	F.Intrinsic.String.Concat("ERROR! Error linking document:  Unable to find Item Master record for ",V.Local.sPath,V.Local.sQuery)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sQuery)
'	F.Intrinsic.File.DeleteFile(V.Local.sTargPath)
	F.ODBC.conx!rstItem.Close
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
F.ODBC.conx!rstItem.Close

F.Intrinsic.Debug.SetLA("Copies Item from M:\To Be Processed to M:\Processed, then returns target and source path")
F.Intrinsic.Control.CallSub(Move_item,"sPath",V.Local.sPath)
V.Local.sTargPath.Set(V.Args.sTargPath)
V.Local.sSourcePath.Set(V.Args.sSourcePath)

F.Intrinsic.Debug.SetLA("Adds doc to Item Link")
F.Global.DocumentControl.CreateReference(V.Local.sKey,31,V.Local.iLinkID)
F.Global.DocumentControl.AddDocument(V.Local.iLinkID,V.local.sTargPath,"",-1,"")
F.Intrinsic.String.Concat("Attached ",V.Local.sTargPath," to Item Link ID: ",V.Local.iLinkID,", Key: ",V.Local.sKey,V.Local.sQuery)
F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sQuery)
F.Global.DocumentControl.GetDocumentID(V.Local.iLinkID,V.Local.sTargPath,V.Local.iDocID)
'GetDocumentID doesn't seem to work, but if it does, I would check to see if it returns one.  If yes, delete sourcepath, otherwise, delete targpath

F.Intrinsic.Debug.SetLA("Attaches doc to all WOs the Item has been issued to")
F.Intrinsic.String.Concat("SELECT DISTINCT JOB, SUFFIX FROM V_ITEM_HISTORY WHERE PART='",V.Local.sPart,"' AND LOT='",V.Local.sLot,"' AND BIN='",V.Local.sBin,"' AND HEAT='",V.Local.sHeat,"' AND JOB<>'' AND PROGRAM_USED='JB0075GI'",V.Local.sQuery)
F.ODBC.Connection!conx.OpenRecordsetRO("rstWOs",V.Local.sQuery)
F.Intrinsic.Control.DoUntil(V.ODBC.conx!rstWOs.EOF,=,True)
	F.Intrinsic.String.RPad(V.ODBC.conx!rstWOs.FieldValRTrim!JOB," ",6,V.Local.sKey)
	F.Intrinsic.String.Concat(V.Local.sKey,V.ODBC.conx!rstWOs.FieldValRTrim!SUFFIX,V.Local.sKey)
	F.Intrinsic.String.RTrim(V.Local.sKey,V.Local.sKey)
	F.Global.DocumentControl.CreateReference(V.Local.sKey,20,V.Local.iLinkID)
	F.Global.DocumentControl.AddDocument(V.Local.iLinkID,V.Local.sTargPath,"",-1,"")
	F.Intrinsic.String.Concat("Attached ",V.Local.sTargPath," to WO Link ID: ",V.Local.iLinkID,", Key: ",V.Local.sKey,V.Local.sQuery)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sQuery)

	F.ODBC.conx!rstWOs.MoveNext
F.Intrinsic.Control.Loop
F.ODBC.conx!rstWOs.Close

F.Intrinsic.File.DeleteFile(V.Local.sSourcePath)

Program.Sub.Process_PDF.End

Program.Sub.Get_Items.Start
F.Intrinsic.Debug.SetLA("Get_Items: Separates passed FQ filename out into Item elements")
V.Local.sBin.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sHeat.Declare(String)
V.Local.sPath.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.iRight.Declare(Long)

F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.args.sPath)
V.Local.sHeat.Set(V.Args.sItem)
F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.args.sPath)
V.Local.sPart.Set(V.Args.sItem)
'12/2/10 Revision:
'___
F.Intrinsic.String.Replace(V.Local.sPart,"!$!","/",V.Local.sPart)
'___
F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.args.sPath)
V.Local.sLot.Set(V.Args.sItem)
F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.args.sPath)
V.Local.sBin.Set(V.Args.sItem)

F.Intrinsic.String.Instr(V.Local.sHeat,V.Local.sLot,V.Local.iPos)
F.Intrinsic.Control.If(V.Local.iPos,<>,0)
	F.Intrinsic.Math.Sub(V.Local.sHeat.Length,V.Local.iPos,V.Local.sLot.Length,-1,V.Local.iRight)
	F.Intrinsic.String.Right(V.Local.sHeat,V.Local.iRight,V.Local.sHeat)

	F.Intrinsic.String.Instr(V.Local.sHeat,"-",V.Local.iPos)
	F.Intrinsic.Control.If(V.Local.iPos,<>,0)
		F.Intrinsic.Math.Sub(V.Local.sHeat.Length,V.Local.iPos,V.Local.iRight)
		F.Intrinsic.String.Right(V.Local.sHeat,V.Local.iRight,V.Local.sHeat)
		F.Intrinsic.String.InstrRev(V.Local.sHeat,".",V.Local.iPos)
		F.Intrinsic.Math.Sub(V.Local.iPos,1,V.Local.iPos)
		F.Intrinsic.String.Left(V.Local.sHeat,V.Local.iPos,V.Local.sHeat)
	F.Intrinsic.Control.Else
		V.Local.sHeat.Set("")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	V.Local.sHeat.Set("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("sBin",V.Local.sBin)
F.Intrinsic.Variable.AddRV("sLot",V.Local.sLot)
F.Intrinsic.Variable.AddRV("sPart",V.Local.sPart)
F.Intrinsic.Variable.AddRV("sHeat",V.Local.sHeat)

Program.Sub.Get_Items.End

Program.Sub.Append_Last_Item.Start
F.Intrinsic.Debug.SetLA("Append_Last_Item: Appends the last item off a file path and returns the item and the remaining path as strings")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Append_Last_Item_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sPath.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.iRight.Declare(Long)
V.Local.sItem.Declare(String)

V.Local.sPath.Set(V.Args.sPath)
F.Intrinsic.String.InstrRev(V.Local.sPath,"\",V.Local.iPos)
F.Intrinsic.Math.Sub(V.Local.sPath.Length,V.Local.iPos,V.Local.iRight)
F.Intrinsic.String.Right(V.Local.sPath,V.Local.iRight,V.Local.sItem)
F.Intrinsic.Math.Sub(V.Local.iPos,1,V.Local.iPos)
F.Intrinsic.String.Left(V.Local.sPath,V.Local.iPos,V.Local.sPath)

F.Intrinsic.Variable.AddRV("sPath",V.Local.sPath)
F.Intrinsic.Variable.AddRV("sItem",V.Local.sItem)

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Append_Last_Item_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf


Program.Sub.Append_Last_Item.End

Program.Sub.Move_Item.Start
F.Intrinsic.Debug.SetLA("Move_Item:  Moves a passed FQ filename (in M:\To Be Processed) to a target path (in M:\Processed).  Will increment file name in target path if file name already exists.  Returns both source and target paths as FQ UNC Filenames")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Move_Item_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sSourcePath.Declare(String)
V.Local.sTargPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sExists.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.iNo.Declare(Long)
V.Local.sTemp.Declare(String)
V.Local.sFile.Declare(String)
V.Local.bNumeric.Declare(Boolean)
V.Local.bIncremented.Declare(Boolean)
V.Local.iRight.Declare(Long)

V.Local.sSourcePath.set(V.Args.sPath)
F.Intrinsic.String.Replace(V.Local.sSourcePath,"To Be Processed","Processed",V.Local.sTargPath)
F.Intrinsic.Control.CallSub(Check_dirs_exist,"sPath",V.Local.sTargPath)

F.Intrinsic.Debug.SetLA("Makes sure not to overwrite existing files in M:\Processed by auto-incrementing the filename")
F.Intrinsic.File.Exists(V.Local.sTargPath,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,True)
	F.Intrinsic.String.InstrRev(V.Local.sTargPath,".",V.Local.iPos)
	F.Intrinsic.Math.Sub(V.Local.sTargPath.Length,V.Local.iPos,V.Local.iRight)
	F.Intrinsic.String.Right(V.Local.sTargPath,V.Local.iRight,V.Local.sTemp)
	F.Intrinsic.Math.Sub(V.Local.iPos,1,V.Local.iPos)
	F.Intrinsic.String.Left(V.Local.sTargPath,V.Local.iPos,V.Local.sTargPath)
	V.Local.iNo.Set(1)
	F.Intrinsic.Control.DoUntil(V.Local.bExists,=,False)
		F.Intrinsic.Math.Add(V.Local.iNo,1,V.Local.iNo)
		F.Intrinsic.String.Concat(V.Local.sTargPath,"(",V.Local.iNo,").",V.Local.sTemp,V.Local.sFile)
		F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
	F.Intrinsic.Control.Loop
	V.Local.sTargPath.Set(V.Local.sFile)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.GetUNCName(V.Local.sSourcePath,V.Local.sSourcePath)
F.Intrinsic.String.Replace(V.Local.sSourcePath,"'","''",V.Local.sSourcePath)
F.Intrinsic.File.CopyFile(V.Local.sSourcePath,V.Local.sTargPath)

F.Intrinsic.File.GetUNCName(V.Local.sTargPath,V.Local.sTargPath)
F.Intrinsic.String.Replace(V.Local.sTargPath,"'","''",V.Local.sTargPath)
F.Intrinsic.Variable.AddRV("sSourcePath",V.Local.sSourcePath)
F.Intrinsic.Variable.AddRV("sTargPath",V.Local.sTargPath)

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Move_Item_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf




Program.Sub.Move_Item.End

Program.Sub.Check_Dirs_Exist.Start
F.Intrinsic.Debug.SetLA("Check_Dirs_Exist:  Verifies the target directory in M:\Processed exists, otherwise creates the directory")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Check_Dirs_Exist_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sDirs.Declare(String)
V.Local.sDirs.Redim(-1,-1)
V.Local.iUB.Declare(Long,-1)
V.Local.bExists.Declare(Boolean)
V.Local.sDir.Declare(String)
V.Local.sOrigPath.Declare(String)
V.Local.iC.Declare(Long)

V.Local.sOrigPath.Set(V.Args.sPath)

F.Intrinsic.Debug.SetLA("Separates the target directory into an array in order to loop through")
F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.Args.sPath)
F.Intrinsic.Control.DoUntil(V.Args.sItem.Trim,=,"M:")
	F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.Args.sPath)
	F.Intrinsic.Control.If(V.Args.sItem,<>,"Processed")
		V.Local.sDir.Set(V.Args.sPath)
		F.Intrinsic.Math.Add(V.Local.iUB,1,V.Local.iUB)
		F.Intrinsic.Control.If(V.Local.iUB,=,0)
			V.local.sDirs.redim(0,0)
		F.Intrinsic.Control.Else
			V.Local.sDirs.RedimPreserve(0,V.Local.iUB)
		F.Intrinsic.Control.EndIf
		V.Local.sDirs(v.Local.iUB).Set(V.Args.sItem)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.ExitDo
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Loop

F.Intrinsic.Debug.SetLA("Beginning with M:\Processed, loops through the target directory array one folder at a time to make sure each folder exists and create it if it does not")
F.Intrinsic.Control.If(V.Local.sDir,=,"M:\Processed")
	F.Intrinsic.File.DirExists(V.Local.sDir,V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,<>,True)
		F.Intrinsic.File.CreateDir(V.Local.sDir)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.For(V.Local.iC,V.Local.sDirs.UBound,0,-1)
		F.Intrinsic.String.Concat(V.Local.sDir,"\",V.Local.sDirs(v.Local.iC),V.Local.sDir)
		F.Intrinsic.File.DirExists(V.Local.sDir,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists,<>,True)
			F.Intrinsic.File.CreateDir(V.Local.sDir)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iC)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Concat("ERROR! Issue copying file from To Be Processed folder to Processed folder: Unable to verify target directory exists for ",V.Local.sOrigPath,V.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Check_Dirs_Exist_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf



Program.Sub.Check_Dirs_Exist.End

Program.Sub.Unload.Start
F.ODBC.Connection!conx.Close
f.Intrinsic.Control.End

Program.Sub.Unload.End

Program.Sub.DL.Start
V.Local.bExists.Declare(Boolean)

F.Intrinsic.Control.If(V.Global.sFile,=,"")
'12/2/10 Revision:
'___
	F.Intrinsic.File.DirExists("M:\Logs",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,<>,True)
		F.Intrinsic.File.CreateDir("M:\Logs")
	F.Intrinsic.Control.EndIf

	F.Intrinsic.File.DirExists("M:\Logs\Task Sched Log",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,<>,True)
		F.Intrinsic.File.CreateDir("M:\Logs\Task Sched Logs")
	F.Intrinsic.Control.EndIf

	F.Intrinsic.String.Format(V.Ambient.Now,"YYYY-MM-DD_HHNNSS",V.Global.sFile)
	F.Intrinsic.String.Concat("M:\Logs\Task Sched Logs\Task_Sched_Log_",V.Global.sFile,".txt",V.Global.sFile)
'	F.Intrinsic.String.Concat(V.Caller.TempDir,"\Task_Sched_Attach_Links_Log.txt",V.Global.sFile)
'___
F.Intrinsic.Control.EndIf

F.Intrinsic.Debug.SetLA(V.Args.sText)
F.Intrinsic.String.Concat(V.Ambient.Date," ",V.Ambient.Time," - ",V.Args.sText,V.Global.sLog)
F.Intrinsic.File.Exists(V.Global.sFile,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,True)
	F.Intrinsic.File.Append2FileNewLine(V.Global.sFile,V.Global.sLog)
F.Intrinsic.Control.Else
	F.Intrinsic.File.String2File(V.Global.sFile,V.Global.sLog)
F.Intrinsic.Control.EndIf
'
Program.Sub.DL.End


