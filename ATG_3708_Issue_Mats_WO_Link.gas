Program.Sub.ScreenSU.Start
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start

Variable.Global.sSuffix.Declare(String,"001")
Variable.Global.sJob.Declare(String,"000155")
Variable.Global.sFile.Declare(String)
Variable.Global.sLog.Declare(String)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Coded by: SMC
'Project Start Date: 11/10/2010
'Hooks:
'  JBS0075A-PRE-SAVE-HOOK
'Notes:
'  The script will run off the issue material pre-save hook and open the ITEM_HISTORY table using the selected WO and suffix to retrieve any items used on the WO.  It will then
'  search for any files associated to each item in M:\To Be Processed, which is in the format of M:\To Be Processed\BIN\LOT\PART\LOT-HEAT.PDF.  If any files are found,
'  they will be moved to M:\Processed\BIN\LOT\PART\LOT-HEAT.PDF and be attached to the Item and WO link.

'REVISIONS:
'12/2/10:
'  - Since some of their parts have "/" characters in them, I'm doing a string replace in part folders where "!$!" is replaced with "/" before searching item master records. (Get_Items)
'  - In the AddDocument command, I changed the group from 0 to -1 for both link types.  -1 allows all users to see, 0 only SUPERVSR (Process_Docs)
'  - Changed Program log to write to M:\Logs instead of Global\TEMP (DL)

F.Intrinsic.Control.If(V.Caller.Hook,=,28840)
	V.Global.sJob.Set(V.Passed.000002)
	V.Global.sSuffix.Set(V.Passed.000003)
F.Intrinsic.Control.ElseIf(V.Caller.Hook,<>,0)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.sJob.Trim,=,"")
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

F.ODBC.Connection!conx.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)

V.Local.sText.Declare(String)

F.Intrinsic.String.Concat("Program Start: Processing Item docs issued to Job: ",V.Global.sJob," Suffix: ",V.Global.sSuffix,V.Local.sText)
F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sText)

F.Intrinsic.Control.CallSub(Process_items)
F.Intrinsic.Control.CallSub(Unload)

Program.Sub.Main.End

Program.Sub.Process_Items.Start
F.Intrinsic.Debug.SetLA("Process_Items:  Gets distinct Items from selected WO, and then for each item it gets all docs (Get_Docs), and processes them (Process_Docs)")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Process_Items_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sQuery.Declare(String)
V.Local.sDocs.Declare(String)
V.Local.iC.Declare(Long)
V.Local.bFoundItem.Declare(Boolean)
V.Local.sPart.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sHeat.Declare(String)
V.Local.sItemKey.Declare(String)
V.Local.sWOKey.Declare(String)

F.Intrinsic.Debug.Stop

F.Intrinsic.String.Concat("SELECT DISTINCT BIN, LOT, PART, HEAT FROM V_ITEM_HISTORY WHERE JOB='",V.Global.sJob,"'AND SUFFIX='",V.Global.sSuffix,"'",V.Local.sQuery)
F.ODBC.Connection!conx.OpenRecordsetRO("rstItems",V.Local.sQuery)
F.Intrinsic.Control.DoUntil(V.ODBC.conx!rstItems.EOF,=,True)
	V.Local.sBin.Set(V.ODBC.conx!rstItems.FieldValRTrim!BIN)
	V.Local.sLot.Set(V.ODBC.conx!rstItems.FieldValRTrim!LOT)
	V.Local.sPart.Set(V.ODBC.conx!rstItems.FieldValRTrim!PART)
	V.Local.sHeat.Set(V.ODBC.conx!rstItems.FieldValRTrim!HEAT)

	V.Local.bFoundItem.Set(False)
	F.Intrinsic.String.Concat("SELECT * FROM V_ITEM_MASTER WHERE PART='",V.Local.sPart,"' AND LOT='",V.Local.sLot,"' AND BIN='",V.Local.sBin,"' AND HEAT='",V.Local.sHeat,"'",V.Local.sQuery)
	F.ODBC.Connection!conx.OpenRecordsetRO("rstItem",V.Local.sQuery)
	F.Intrinsic.Control.If(V.ODBC.conx!rstItem.EOF,<>,True)
		V.Local.bFoundItem.Set(True)
	F.Intrinsic.Control.EndIf
	F.ODBC.conx!rstItem.Close

	F.Intrinsic.Control.If(V.Local.bFoundItem,=,True)
		F.Intrinsic.Debug.Stop
		F.Intrinsic.Control.CallSub(Get_docs,"Bin",V.Local.sBin,"Lot",V.Local.sLot,"Part",V.Local.sPart,"Heat",V.Local.sHeat)
		F.Intrinsic.Control.If(V.Args.sDocs,<>,"")
			F.Intrinsic.String.RPad(V.Local.sPart.RTrim," ",22,V.Local.sPart)
			F.Intrinsic.String.RPad(V.Local.sLot.RTrim," ",15,V.Local.sLot)
			F.Intrinsic.String.RPad(V.Local.sBin.RTrim," ",6,V.Local.sBin)
			F.Intrinsic.String.RTrim(V.Local.sHeat,V.Local.sHeat)
			F.Intrinsic.String.Concat(V.Local.sPart,V.Local.sLot,V.Local.sBin,V.Local.sHeat,V.Local.sItemKey)

			F.Intrinsic.String.RPad(V.Global.sJob," ",6,V.Local.sWOKey)
			F.Intrinsic.String.Concat(V.Local.sWOKey,V.Global.sSuffix,V.Local.sWOKey)
			F.Intrinsic.String.RTrim(V.Local.sWOKey,V.Local.sWOKey)

			F.Intrinsic.Control.CallSub(Process_docs,"sWOKey",V.Local.sWOKey,"sItemKey",V.Local.sItemKey,"sDocs",V.Args.sDocs)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Concat("ERROR! Unable to find Item record for Bin: ",V.Local.sBin," Lot: ",V.Local.sLot," Part: ",V.Local.sPart," Heat: ",V.Local.sHeat,V.Local.sQuery)
		F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sQuery)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Debug.Stop
	F.ODBC.conx!rstItems.MoveNext
F.Intrinsic.Control.Loop
F.ODBC.conx!rstItems.Close

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Process_Items_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.Process_Items.End

Program.Sub.Unload.Start
v.Local.sText.Declare(String)
F.Intrinsic.String.Concat("Program End",V.Ambient.NewLine,V.Ambient.NewLine,V.Local.sText)
F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sText)
F.ODBC.Connection!conx.Close
F.Intrinsic.Control.End

Program.Sub.Unload.End

Program.Sub.Get_Docs.Start
F.Intrinsic.Debug.SetLA("Get_Docs:  Fiters the returned docs from Sub Get_Dirs, returning only files that are tied to the passed item, by identifying them as Lot-Heat.ext format")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Get_Docs_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sPath.Declare(String)
V.Local.sPDFs.Declare(String)
V.Local.sItemDocs.Declare(String)
V.Local.sItemDocsString.Declare(String)
V.Local.sItemDocs.Redim(-1,-1)
V.Local.iUB.Declare(Long,-1)
V.Local.iC.Declare(Long)
V.Local.sDocName.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.sTemp.Declare(String)
V.Local.iRight.Declare(Long)
'F.Intrinsic.Debug.InvokeDebugger
F.Intrinsic.Debug.Stop
'12/2/10 Revision:
'___
V.Local.sPart.Declare(String)
F.Intrinsic.String.Replace(V.args.Part,"/","!$!",V.Local.sPart)
F.Intrinsic.String.Replace(V.args.Part,V.Ambient.DblQuote,"#!#",V.Local.sPart)
F.Intrinsic.String.Concat("M:\To Be Processed\",V.args.Bin,"\",V.Args.Lot,"\",V.local.sPart,"\",V.Local.sPath)
'F.Intrinsic.String.Concat("M:\To Be Processed\",V.args.Bin,"\",V.Args.Lot,"\",V.Args.Part,"\",V.Local.sPath)
'___

F.Intrinsic.String.Concat(V.Args.Lot,"-",V.Args.Heat,V.Local.sDocName)

F.Intrinsic.Control.CallSub(Get_dirs,"sDir",V.local.sPath,"iType",1)
F.Intrinsic.Control.If(V.args.sDirs,<>,"")
	F.Intrinsic.String.Split(V.Args.sDirs,";",V.Local.sPDFs)
	F.Intrinsic.Control.For(V.Local.iC,0,V.Local.sPDFs.UBound,1)
		F.Intrinsic.String.Instr(V.Local.sPDFs(v.Local.iC),V.Local.sPath,0,V.Local.iPos)
		F.Intrinsic.Control.If(V.Local.iPos,<>,0)
			F.Intrinsic.Math.Sub(V.Local.sPDFs(v.Local.iC).Length,V.Local.iPos,V.Local.sPath.Length,-1,V.Local.iRight)
			F.Intrinsic.String.Right(V.Local.sPDFs(v.Local.iC),V.Local.iRight,V.Local.sTemp)
			F.Intrinsic.String.InstrRev(V.Local.sTemp,".",V.Local.iPos)
			F.Intrinsic.Control.If(V.Local.iPos,<>,0)
				F.Intrinsic.Math.Sub(V.Local.iPos,1,V.Local.iPos)
				F.Intrinsic.String.Left(V.Local.sTemp,V.Local.iPos,V.Local.sTemp)
			F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.If(V.Local.sTemp,=,V.Local.sDocName)
				F.Intrinsic.Math.Add(V.Local.iUB,1,V.Local.iUB)
				F.Intrinsic.Control.If(V.Local.iUB,=,0)
					V.Local.sItemDocs.Redim(0,0)
				F.Intrinsic.Control.Else
					V.Local.sItemDocs.RedimPreserve(0,V.Local.iUB)
				F.Intrinsic.Control.EndIf
				V.Local.sItemDocs(v.Local.iUB).Set(V.Local.sPDFs(v.Local.iC))
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iC)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Join(V.Local.sItemDocs,";",V.Local.sItemDocsString)
F.Intrinsic.Variable.AddRV("sDocs",V.Local.sItemDocsString)


Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Get_Docs_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf


Program.Sub.Get_Docs.End

Program.Sub.Get_Dirs.Start
F.Intrinsic.Debug.SetLA("Get_Dirs: Returns all folders (iType=0) or files (iType=1) as FQPs from a passed file directory")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Get_Dirs_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sDir.Declare(String)
V.Local.sDirs.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.bRet.Declare(Boolean)
V.Local.bPDF.Declare(Boolean)
V.Local.iC.Declare(Long)

V.Local.sDir.Set(V.Args.sDir)
F.Intrinsic.File.DirExists(V.Local.sDir,V.Local.bRet)

F.Intrinsic.Control.If(V.Local.bRet,=,True)
	F.Intrinsic.Control.If(V.Args.iType,=,0)
		F.Intrinsic.File.GetFileList(V.Local.sDir,16,V.Local.sDirs)
	F.Intrinsic.Control.Else
		F.Intrinsic.File.GetFileList(V.Local.sDir,4,V.Local.sDirs)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.String.Split(V.Local.sDirs,":",V.Local.sDirs)
	F.Intrinsic.Control.If(V.Local.sDirs.UBound,>=,0)
		F.Intrinsic.Control.For(V.Local.iC,0,V.Local.sDirs.UBound,1)
			F.Intrinsic.Control.If(V.Local.sDirs(v.Local.iC),<>,"")
				F.Intrinsic.Control.If(V.Local.sDirs(v.Local.iC),<>,".")
					F.Intrinsic.Control.If(V.Local.sDirs(v.Local.iC),<>,"..")
						F.Intrinsic.Control.If(V.Args.iType,=,0)
							'Adds Fully Qualified Paths for Dirs
							F.Intrinsic.Control.If(V.Local.sRet,=,"")
								F.Intrinsic.String.Concat(V.Local.sDir,V.Local.sDirs(v.Local.iC),"\",V.Local.sRet)
							F.Intrinsic.Control.Else
								F.Intrinsic.String.Concat(V.Local.sRet,";",V.Local.sDir,V.Local.sDirs(v.Local.iC),"\",V.Local.sRet)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else
							'Adds FQPs for PDFs
							F.Intrinsic.Control.If(V.Local.sRet,=,"")
								F.Intrinsic.String.Concat(V.Local.sDir,V.Local.sDirs(v.Local.iC),V.Local.sRet)
							F.Intrinsic.Control.Else
								F.Intrinsic.String.Concat(V.Local.sRet,";",V.Local.sDir,V.Local.sDirs(v.Local.iC),V.Local.sRet)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iC)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("sDirs",V.Local.sRet)

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Get_Dirs_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf




Program.Sub.Get_Dirs.End

Program.Sub.DL.Start
V.Local.bExists.Declare(Boolean)

F.Intrinsic.Control.If(V.Global.sFile,=,"")
'12/2/10 Revision:
'___
	F.Intrinsic.File.DirExists("M:\Logs",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,<>,True)
		F.Intrinsic.File.CreateDir("M:\Logs")
	F.Intrinsic.Control.EndIf

	F.Intrinsic.File.DirExists("M:\Logs\Issue Mats Logs",V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,<>,True)
		F.Intrinsic.File.CreateDir("M:\Logs\Issue Mats Logs")
	F.Intrinsic.Control.EndIf

	F.Intrinsic.String.Format(V.Ambient.Now,"YYYY-MM-DD_HHNNSS",V.Global.sFile)
	F.Intrinsic.String.Concat("M:\Logs\Issue Mats Logs\Issue_Mats_Log_",V.Global.sFile,".txt",V.Global.sFile)
'	F.Intrinsic.String.Concat(V.Caller.TempDir,"\Issue_Mats_Attach_Links_Log.txt",V.Global.sFile)
'___
F.Intrinsic.Control.EndIf

F.Intrinsic.Debug.SetLA(V.Args.sText)
F.Intrinsic.String.Concat(V.Ambient.Date," ",V.Ambient.Time," - ",V.Args.sText,V.Global.sLog)
F.Intrinsic.File.Exists(V.Global.sFile,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,True)
	F.Intrinsic.File.Append2FileNewLine(V.Global.sFile,V.Global.sLog)
F.Intrinsic.Control.Else
	F.Intrinsic.File.String2File(V.Global.sFile,V.Global.sLog)
F.Intrinsic.Control.EndIf




Program.Sub.DL.End

Program.Sub.Move_Item.Start
F.Intrinsic.Debug.SetLA("Move_Item:  Moves a passed FQ filename (in M:\To Be Processed) to a target path (in M:\Processed).  Will increment file name in target path if file name already exists.  Returns both source and target paths as FQ UNC Filenames")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Move_Item_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sSourcePath.Declare(String)
V.Local.sTargPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sExists.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.iNo.Declare(Long)
V.Local.sTemp.Declare(String)
V.Local.sFile.Declare(String)
V.Local.bNumeric.Declare(Boolean)
V.Local.bIncremented.Declare(Boolean)
V.Local.iRight.Declare(Long)

V.Local.sSourcePath.set(V.Args.sPath)
F.Intrinsic.String.Replace(V.Local.sSourcePath,"To Be Processed","Processed",V.Local.sTargPath)
F.Intrinsic.Control.CallSub(Check_dirs_exist,"sPath",V.Local.sTargPath)

F.Intrinsic.Debug.SetLA("Makes sure not to overwrite existing files in M:\Processed by auto-incrementing the filename")
F.Intrinsic.File.Exists(V.Local.sTargPath,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,True)
	F.Intrinsic.String.InstrRev(V.Local.sTargPath,".",V.Local.iPos)
	F.Intrinsic.Math.Sub(V.Local.sTargPath.Length,V.Local.iPos,V.Local.iRight)
	F.Intrinsic.String.Right(V.Local.sTargPath,V.Local.iRight,V.Local.sTemp)
	F.Intrinsic.Math.Sub(V.Local.iPos,1,V.Local.iPos)
	F.Intrinsic.String.Left(V.Local.sTargPath,V.Local.iPos,V.Local.sTargPath)
	V.Local.iNo.Set(1)
	F.Intrinsic.Control.DoUntil(V.Local.bExists,=,False)
		F.Intrinsic.Math.Add(V.Local.iNo,1,V.Local.iNo)
		F.Intrinsic.String.Concat(V.Local.sTargPath,"(",V.Local.iNo,").",V.Local.sTemp,V.Local.sFile)
		F.Intrinsic.File.Exists(V.Local.sFile,V.Local.bExists)
	F.Intrinsic.Control.Loop
	V.Local.sTargPath.Set(V.Local.sFile)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.GetUNCName(V.Local.sSourcePath,V.Local.sSourcePath)
F.Intrinsic.String.Replace(V.Local.sSourcePath,"'","''",V.Local.sSourcePath)
F.Intrinsic.File.CopyFile(V.Local.sSourcePath,V.Local.sTargPath)

F.Intrinsic.File.GetUNCName(V.Local.sTargPath,V.Local.sTargPath)
F.Intrinsic.String.Replace(V.Local.sTargPath,"'","''",V.Local.sTargPath)
F.Intrinsic.Variable.AddRV("sSourcePath",V.Local.sSourcePath)
F.Intrinsic.Variable.AddRV("sTargPath",V.Local.sTargPath)

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Move_Item_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf



Program.Sub.Move_Item.End

Program.Sub.Check_Dirs_Exist.Start
F.Intrinsic.Debug.SetLA("Check_Dirs_Exist:  Verifies the target directory in M:\Processed exists, otherwise creates the directory")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Check_Dirs_Exist_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sDirs.Declare(String)
V.Local.sDirs.Redim(-1,-1)
V.Local.iUB.Declare(Long,-1)
V.Local.bExists.Declare(Boolean)
V.Local.sDir.Declare(String)
V.Local.sOrigPath.Declare(String)
V.Local.iC.Declare(Long)

V.Local.sOrigPath.Set(V.Args.sPath)

F.Intrinsic.Debug.SetLA("Separates the target directory into an array in order to loop through")
F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.Args.sPath)
F.Intrinsic.Control.DoUntil(V.Args.sItem.Trim,=,"M:")
	F.Intrinsic.Control.CallSub(Append_last_item,"sPath",V.Args.sPath)
	F.Intrinsic.Control.If(V.Args.sItem,<>,"Processed")
		V.Local.sDir.Set(V.Args.sPath)
		F.Intrinsic.Math.Add(V.Local.iUB,1,V.Local.iUB)
		F.Intrinsic.Control.If(V.Local.iUB,=,0)
			V.local.sDirs.redim(0,0)
		F.Intrinsic.Control.Else
			V.Local.sDirs.RedimPreserve(0,V.Local.iUB)
		F.Intrinsic.Control.EndIf
		V.Local.sDirs(v.Local.iUB).Set(V.Args.sItem)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.ExitDo
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Loop

F.Intrinsic.Debug.SetLA("Beginning with M:\Processed, loops through the target directory array one folder at a time to make sure each folder exists and create it if it does not")
F.Intrinsic.Control.If(V.Local.sDir,=,"M:\Processed")
	F.Intrinsic.File.DirExists(V.Local.sDir,V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists,<>,True)
		F.Intrinsic.File.CreateDir(V.Local.sDir)
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.For(V.Local.iC,V.Local.sDirs.UBound,0,-1)
		F.Intrinsic.String.Concat(V.Local.sDir,"\",V.Local.sDirs(v.Local.iC),V.Local.sDir)
		F.Intrinsic.File.DirExists(V.Local.sDir,V.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists,<>,True)
			F.Intrinsic.File.CreateDir(V.Local.sDir)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iC)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Concat("ERROR! Issue copying file from To Be Processed folder to Processed folder: Unable to verify target directory exists for ",V.Local.sOrigPath,V.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Check_Dirs_Exist_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf


Program.Sub.Check_Dirs_Exist.End

Program.Sub.Append_Last_Item.Start
F.Intrinsic.Debug.SetLA("Append_Last_Item: Appends the last item off a file path and returns the item and the remaining path as strings")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Append_Last_Item_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sPath.Declare(String)
V.Local.iPos.Declare(Long)
V.Local.iRight.Declare(Long)
V.Local.sItem.Declare(String)

V.Local.sPath.Set(V.Args.sPath)
F.Intrinsic.String.InstrRev(V.Local.sPath,"\",V.Local.iPos)
F.Intrinsic.Math.Sub(V.Local.sPath.Length,V.Local.iPos,V.Local.iRight)
F.Intrinsic.String.Right(V.Local.sPath,V.Local.iRight,V.Local.sItem)
F.Intrinsic.Math.Sub(V.Local.iPos,1,V.Local.iPos)
F.Intrinsic.String.Left(V.Local.sPath,V.Local.iPos,V.Local.sPath)

F.Intrinsic.Variable.AddRV("sPath",V.Local.sPath)
F.Intrinsic.Variable.AddRV("sItem",V.Local.sItem)

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Append_Last_Item_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf

Program.Sub.Append_Last_Item.End

Program.Sub.Process_Docs.Start
F.Intrinsic.Debug.SetLA("Process_Docs: Passed docs to attach, and WO & Item Link keys, and attaches all docs to WO and Item")
V.Local.sError.Declare(String)

Function.Intrinsic.Control.SetErrorHandler("Process_Docs_Err")
Function.Intrinsic.Control.ClearErrors

V.Local.sTargPath.Declare(String)
V.Local.sSourcePath.Declare(String)
V.Local.sItemKey.Declare(String)
V.Local.sWOKey.Declare(String)
V.Local.iWOLinkID.Declare(Long)
V.Local.iItemLinkID.Declare(Long)
V.Local.sDocs.Declare(String)
V.Local.iC.Declare(Long)
V.Local.sMsg.Declare(String)

V.Local.sItemKey.Set(V.Args.sItemKey)
V.Local.sWOKey.Set(V.Args.sWOKey)

F.Global.DocumentControl.CreateReference(V.Local.sItemKey,31,V.Local.iItemLinkID)
F.Global.DocumentControl.CreateReference(V.Local.sWOKey,20,V.Local.iWOLinkID)
F.Intrinsic.Debug.Stop

F.Intrinsic.String.Split(V.Args.sDocs,";",V.Local.sDocs)
F.Intrinsic.Control.For(V.Local.iC,0,V.Local.sDocs.UBound,1)
	F.Intrinsic.Control.CallSub(Move_item,"sPath",V.Local.sDocs(v.Local.iC))
	F.Intrinsic.Debug.Stop
	V.Local.sTargPath.Set(V.Args.sTargPath)
	V.Local.sSourcePath.Set(V.Args.sSourcePath)
	F.Global.DocumentControl.AddDocument(V.Local.iItemLinkID,V.local.sTargPath,"",-1,"")
	F.Intrinsic.String.Concat("Attached ",V.Local.sTargPath," to Item Link ID: ",V.Local.iItemLinkID,", Key: ",V.Local.sItemKey,V.Local.sMsg)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sMsg)

	F.Global.DocumentControl.AddDocument(V.Local.iWOLinkID,V.Local.sTargPath,"",-1,"")
	F.Intrinsic.String.Concat("Attached ",V.Local.sTargPath," to WO Link ID: ",V.Local.iWOLinkID,", Key: ",V.Local.sWOKey,V.Local.sMsg)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sMsg)

	F.Intrinsic.File.DeleteFile(V.Local.sSourcePath)
F.Intrinsic.Control.Next(V.Local.iC)

Function.Intrinsic.Control.ExitSub
Function.Intrinsic.Control.Label("Process_Docs_Err")
Function.Intrinsic.Control.If(Variable.Ambient.ErrorNumber,"<>",0)
	Function.Intrinsic.String.Concat("Error Occurred ",Variable.Ambient.ErrorNumber," with description ",Variable.Ambient.ErrorDescription,V.ambient.NewLine,"Last Action: ",V.ambient.LastAction,Variable.Local.sError)
	F.Intrinsic.Control.CallSub(Dl,"sText",V.Local.sError)
	F.Intrinsic.Control.CallSub(Unload)
Function.Intrinsic.Control.EndIf



Program.Sub.Process_Docs.End

Program.Sub.Comments.Start
${$0$}$ATG_3708_Issue_Mats_WO_Link$}$JCT$}$4/6/2016
${$1$}$$}$$}$0$}$28840$}$JBS0075A-PRE-SAVE-HOOK$}$4/6/2016 2:59:16 PM$}$(Program: JB0075GI; Screen: JBS0075A)

Program.Sub.Comments.End

